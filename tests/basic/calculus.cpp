/**
 * \file calculus.cpp
 * \brief Unit tests for polynomial calculus.
 * \author Pi-Yueh Chuang
 * \version beta
 * \date 2018-02-01
 */


# include <gtest/gtest.h>

# include "basic.h"
# include "exceptions.h"

using namespace simpoly;


TEST(PolynomialDerive, DerivationReal)
{
    basic::DArry c({
            0.1953470783019697343, -0.5399754693051068699,
            -0.5565786240632799586,  0.3283278396932454157,
            -0.0439041108202367081,  0.5100524449507792824,
            0.1927871164810808224, -0.6376096115390486041,
            0.7400755301744095238});
    
    basic::DArry expect({
            -0.5399754693051068699, -1.1131572481265599173,
            0.9849835190797362472, -0.1756164432809468323,
            2.5502622247538964118,  1.1567226988864849346,
            -4.4632672807733406728,  5.9206042413952761905});
        
    basic::DArry result = basic::derivative(c); 
    
    for(unsigned i=0; i<expect.size(); ++i)
        ASSERT_NEAR(expect[i], result[i], 1e-12);
}

TEST(PolynomialDerive, DerivationComplex)
{
    basic::CArry c({
            basic::Cmplx(-0.3925542384849052269, -0.6118767068933324005),
            basic::Cmplx(-0.5200142900510080768, 0.8639455698177822551),
            basic::Cmplx(-0.1298041502038114192, -0.0851611607317090957),
            basic::Cmplx(0.4507662087762551728, 0.7310574001186977977),
            basic::Cmplx(0.5450378939918825161, -0.8269471136866335392),
            basic::Cmplx(0.0344521057391276031, 0.2782977790596492529),
            basic::Cmplx(0.6766025547305511978, 0.4582691519306760775),
            basic::Cmplx(0.5558407314173727798, 0.6616692523148335336),
            basic::Cmplx(0.3739569481893427749, -0.0665835058924006962),
            basic::Cmplx(-0.9050029358408329117, 0.7416305986935782801),
            basic::Cmplx(0.7157147990090639844, -0.1065866043481440428),
            basic::Cmplx(-0.0761616683975756548, 0.8154170473932844665)});

    basic::CArry expect({
            basic::Cmplx(-0.5200142900510080768, 0.8639455698177822551),
            basic::Cmplx(-0.2596083004076228384, -0.1703223214634181915),
            basic::Cmplx(1.3522986263287655184, 2.1931722003560931711),
            basic::Cmplx(2.1801515759675300643, -3.3077884547465341569),
            basic::Cmplx(0.1722605286956380155, 1.3914888952982462644),
            basic::Cmplx(4.0596153283833071868, 2.7496149115840564647),
            basic::Cmplx(3.8908851199216094585, 4.6316847662038345135),
            basic::Cmplx(2.9916555855147421994, -0.5326680471392055694),
            basic::Cmplx(-8.1450264225674970930, 6.6746753882422042992),
            basic::Cmplx(7.1571479900906398441, -1.0658660434814404283),
            basic::Cmplx(-0.8377783523733322024, 8.9695875213261295755)});
        
    basic::CArry result = basic::derivative(c); 
    
    for(unsigned i=0; i<expect.size(); ++i)
    {
        ASSERT_NEAR(expect[i].real(), result[i].real(), 1e-12);
        ASSERT_NEAR(expect[i].imag(), result[i].imag(), 1e-12);
    }
}

TEST(PolynomialDerive, IntegralReal)
{
    basic::DArry c({
            0.8538721859301963146,  0.2921220802626576241,
            -0.9125881264026460826,  0.2467728385548548786,
            -0.4448851063326948463, -0.6172124325075281082,
            -0.6301262014641872966});
    
    basic::DArry expect({
            0.                   ,  0.8538721859301963146,
            0.146061040131328812 , -0.3041960421342153609,
            0.0616932096387137197, -0.0889770212665389748,
            -0.1028687387512546847, -0.0900180287805981832});
        
    basic::DArry result = basic::integral(c); 
    
    for(unsigned i=0; i<expect.size(); ++i)
        ASSERT_NEAR(expect[i], result[i], 1e-12);
}

TEST(PolynomialDerive, IntegralComplex)
{
    basic::CArry c({
            basic::Cmplx(0.6025638675261288935, -9.0721095249528782567e-01),
            basic::Cmplx(0.7817388265895361954, 9.7348872942768172045e-01),
            basic::Cmplx(-0.7833035790689231170, -6.1527825995206297804e-01),
            basic::Cmplx(0.5636351223452571446, 5.5046731678898930262e-01),
            basic::Cmplx(-0.0879227651963021550, -4.2387335133722436886e-01),
            basic::Cmplx(-0.5941599115521951635, 2.8967328185945806496e-01),
            basic::Cmplx(0.2339115518545566985, -6.2875345487040368297e-01),
            basic::Cmplx(0.2327039011383846834, -7.7802529565275557744e-02),
            basic::Cmplx(0.7153227661500396461, 3.6343150970874482653e-04),
            basic::Cmplx(0.6467798413662011470, 7.9132366307492851831e-01),
            basic::Cmplx(-0.7991979233819350714, 7.5803345513302922143e-02),
            basic::Cmplx(0.2076655561122588978, -1.5665891918604679667e-01),
            basic::Cmplx(-0.1997095307495733163, -6.0345322460532480058e-01),
            basic::Cmplx(0.9759472463551173149, 3.1191077960115709544e-01),
            basic::Cmplx(-0.8705624567794194579, 7.3611852335866179153e-01),
            basic::Cmplx(0.1588213466662637963, 8.3855403336689171567e-02),
            basic::Cmplx(0.0647037688377662956, 8.6514760780481836377e-01)});

    basic::CArry expect({
            basic::Cmplx(0.0000000000000000000, 0.0000000000000000000e+00),
            basic::Cmplx(0.6025638675261288935, -9.0721095249528782567e-01),
            basic::Cmplx(0.3908694132947680977, 4.8674436471384086023e-01),
            basic::Cmplx(-0.2611011930229743538, -2.0509275331735432601e-01),
            basic::Cmplx(0.1409087805863142862, 1.3761682919724732566e-01),
            basic::Cmplx(-0.0175845530392604310, -8.4774670267444882099e-02),
            basic::Cmplx(-0.0990266519253658606, 4.8278880309909677493e-02),
            basic::Cmplx(0.0334159359792223845, -8.9821922124343381300e-02),
            basic::Cmplx(0.0290879876422980854, -9.7253161956594447179e-03),
            basic::Cmplx(0.0794803073500044005, 4.0381278856527202947e-05),
            basic::Cmplx(0.0646779841366201119, 7.9132366307492860158e-02),
            basic::Cmplx(-0.0726543566710850103, 6.8912132284820841466e-03),
            basic::Cmplx(0.0173054630093549058, -1.3054909932170566389e-02),
            basic::Cmplx(-0.0153622715961210243, -4.6419478815794217030e-02),
            basic::Cmplx(0.0697105175967940860, 2.2279341400082648683e-02),
            basic::Cmplx(-0.0580374971186279620, 4.9074568223910784714e-02),
            basic::Cmplx(0.0099263341666414873, 5.2409627085430732230e-03),
            basic::Cmplx(0.0038061040492803704, 5.0891035753224608817e-02)});

        
    basic::CArry result = basic::integral(c); 
    
    for(unsigned i=0; i<expect.size(); ++i)
    {
        ASSERT_NEAR(expect[i].real(), result[i].real(), 1e-12);
        ASSERT_NEAR(expect[i].imag(), result[i].imag(), 1e-12);
    }
}
