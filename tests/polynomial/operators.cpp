/**
 * \file tests/polynomial/operators.cpp
 * \brief Unit tests for overloaded operators of Polynomial class.
 * \author Pi-Yueh Chuang
 * \version beta
 * \date 2018-02-13
 */

# include <algorithm>
# include <cmath>
# include <gtest/gtest.h>
# include <iostream>

# include "exceptions.h"
# include "polynomial.h"

using namespace simpoly;

TEST(PolynomialOp, divide)
{
    poly::Polynomial P1({
        -0.7249546580065966417,  0.2570329501940382677,  0.0913200710812984706,
       -0.1487351182147265138});

    poly::Polynomial P2({
        0.8900399626375006257, -0.8360625184618257766,  0.2475645687375704895,
        0.2191962005870811137, -0.0070950916132856978,  0.1288524842056135711,
        0.0782597597581784488,  0.4690262477613027503,  0.5724070732242025894,
        -0.8291111428879178735,  0.872920016749398231 ,  0.9443092445194338769,
        0.1625131493243689995, -0.2617551207055393014,  0.0936686710914949039,
        -0.8516011759640271794,  0.9098968480444020734,  0.3754564503869470826});

    poly::Polynomial Q1_expect({0.});

    poly::Polynomial R1_expect({
        -0.7249546580065966417,  0.2570329501940382677,  0.0913200710812984706,
        -0.1487351182147265138});

    poly::Polynomial Q2_expect({
        7.3907143656009984625e+03,   1.1966878345780710902e+02,   1.8916616253203562792e+03,
        -8.3085257025485316262e+02,  -8.0834943452350003668e+01,  -5.2159969391234415070e+02,
        -2.4762190619993752705e+01,  -5.8546077249278141608e+01,   8.2347535031402941286e+01,
        2.8045500779741754371e+01,   3.1124068260347449666e+01,  -3.6295392564650286182e+00,
        -3.3443789255969833540e+00,  -7.6674481012515762757e+00,  -2.5243295254917983428e+00});

    poly::Polynomial R2_expect({
        5358.822845301349843794 , -1813.7387379646263525501,   665.9370895505105636403});

    poly::Polynomial R1, R2;
    poly::Polynomial Q1 = P1.divide(P2, R1);
    poly::Polynomial Q2 = P2.divide(P1, R2);

    ASSERT_EQ(Q1_expect, Q1);
    ASSERT_EQ(R1_expect, R1);

    ASSERT_EQ(Q2_expect, Q2);
    ASSERT_EQ(R2_expect, R2);
}

TEST(PolynomialOp, quotient)
{
    poly::Polynomial P1({
        -0.9663667876838777371, -0.3201238251578861771,  0.9429587145559050754,
        -0.3474627673598409405,  0.0485161091447599002,  0.0298298020900540362,
        0.819719546444455105 , -0.5818918500491996326, -0.6203016211126179957,
        0.3206863708335503382,  0.3823814014313382526, -0.59381818908274564  ,
        -0.8460829955484969744, -0.5499673474586161959});

    poly::Polynomial P2({
        -0.3207155701333266329, -0.6168162840504542999,  0.1889574039015020634,
        -0.5915177106195603773, -0.1581791436246160476,  0.0949387071358294143,
        -0.4818915028407591006,  0.6547207093842017933, -0.4128665084180891398,
        0.7668980406052035015});

    poly::Polynomial Q1_expect({
        0.8249657725606294179,  0.8005569239932489589, -0.9638707288415887531,
        -1.489328228002592347 , -0.7171322892214005984});

    poly::Polynomial Q2_expect({0.});

    poly::Polynomial Q1 = P1.quotient(P2);
    poly::Polynomial Q2 = P2.quotient(P1);

    ASSERT_EQ(Q1_expect, Q1);
    ASSERT_EQ(Q2_expect, Q2);
}

TEST(PolynomialOp, remainder)
{
    poly::Polynomial P1({
        -0.0116937069297267104, -0.7994017320589650311,  0.5898645588003439411,
        0.9009811087500272375});

    poly::Polynomial P2({
            0.7017055859963849951, 0.196980626190698338, -0.2045707075553595544});

    poly::Polynomial R1_expect({4.9874466083454764842,  3.694430289015656399});

    poly::Polynomial R2_expect({
        0.7017055859963849951,  0.196980626190698338 , -0.2045707075553595544});

    poly::Polynomial R1 = P1.remainder(P2);
    poly::Polynomial R2 = P2.remainder(P1);

    ASSERT_EQ(R1_expect, R1);
    ASSERT_EQ(R2_expect, R2);
}

TEST(PolynomialOp, operatorPE1)
{
    poly::Polynomial P1({
        -0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    poly::Polynomial P2({
        -0.4374838402741558774, -0.6852547323831388315, -0.7202741574766928778,
        0.6371775123585283751, 0.2281331198558973483, -0.9442293099079275276,
        0.4433559963416691119,  0.9251343783507641749, -0.6762900761052512699,
        0.8490761070965935353, -0.627905488265370515 ,  0.2012677014364148143,
        0.8852808514193275524,  0.1862853350610125247});

    poly::Polynomial expect1({
        -0.6152572432129774782,  0.1924088536214336731, -1.4176913802996480296,
        -0.1874926741867606328, 0.2281331198558973483, -0.9442293099079275276,
        0.4433559963416691119,  0.9251343783507641749, -0.6762900761052512699,
        0.8490761070965935353, -0.627905488265370515 ,  0.2012677014364148143,
        0.8852808514193275524,  0.1862853350610125247});

    poly::Polynomial expect2({
        -1.0527410834871333556, -0.4928458787617051584, -2.1379655377763411295,
        0.4496848381717677423, 0.4562662397117946966, -1.8884586198158550552,
        0.8867119926833382237,  1.8502687567015283499, -1.3525801522105025398,
        1.6981522141931870706, -1.2558109765307410299,  0.4025354028728296285,
        1.7705617028386551048,  0.3725706701220250494});

    P1 += P2;
    P2 += P1;

    ASSERT_EQ(expect1, P1);
    ASSERT_EQ(expect2, P2);
}

TEST(PolynomialOp, operatorPE2)
{
    poly::Polynomial P1({
        -0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    poly::Polynomial expect({
        10.-0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    P1 += 10.;

    ASSERT_EQ(expect, P1);
}

TEST(PolynomialOp, operatorSE1)
{
    poly::Polynomial P1({0.2167545584979095885,  0.5757075266780837808});

    poly::Polynomial P2({
        0.7315319258497021693, -0.6756258293480223998, -0.1651373746655191432,
        -0.7835952931514673647});

    poly::Polynomial expect1({
        -0.5147773673517925808,  1.2513333560261061805,  0.1651373746655191432,
        0.7835952931514673647});

    poly::Polynomial expect2({
        1.24630929320149475, -1.9269591853741285803, -0.3302747493310382865,
        -1.5671905863029347294});

    P1 -= P2;
    P2 -= P1;

    ASSERT_EQ(expect1, P1);
    ASSERT_EQ(expect2, P2);
}

TEST(PolynomialOp, operatorSE2)
{
    poly::Polynomial P1({
        -0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    poly::Polynomial expect({
        -0.1777734029388216008-5.123,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    P1 -= 5.123;

    ASSERT_EQ(expect, P1);
}

TEST(PolynomialOp, operatorME1)
{
    poly::Polynomial P1({
        -0.5689649579390141376, -0.0702595832954791, -0.5008575725600570294,
        -0.0804724410473385277, 0.8826480307696993322, -0.5010628158091532391,
        0.5278138520115187582, -0.3696881673266367851, -0.3031237910748294517,
        0.7814402277929672902, -0.9302201299682937297, -0.1058216476752931179});

    poly::Polynomial P2({
        -0.5168774267455518157,  0.6239152998264949623, -0.295338470855132762,
        -0.8752497437352042553, -0.1272074691700539883, -0.7523140397402710011,
        -0.8928493210168237937,  0.6771718168679945471, 0.4579760061953945804,
        -0.1706921116057984467, -0.6288494421519463806, -0.6656626636186446788,
        0.744891324429169055 ,  0.0330177865672414139, -0.9535056132208914459});

    poly::Polynomial expect1({
        0.2940851433679087523, -0.3186703497053071099, 0.3830831849412457135,
        0.2478384772221420285, -0.2246350458338114975, 1.7088056091018986038,
        -0.1511121873545088201, -0.0396766643104647376, 0.2959964664008620239,
        -1.7484840000816208594, 0.9891105567750591021, 0.6754206172940508957,
        -0.6132482049520595613, 1.594313592910587829, -0.3637603406241872728,
        -0.7310385602380925496, 2.4976199600549144897, -0.5120454674198724465,
        -0.6593466605795673674, 0.0405033454990290087, -0.6584182910207236894,
        1.6103380058676495246, -0.3076397218157354008, -0.8546470805991770447,
        0.8834761188786985908, 0.1009015350586754817});

    poly::Polynomial expect2({
        -0.1520059721481013537, 0.3481977307346908468, -0.4836850141876127829,
        -0.0523729867442680047, 0.3991061153284165552, -1.6125931178939989508,
        0.922114664875417489, -0.2178924904701229348, -2.2097745110605631069,
        1.0260201774187693857, -2.507886220316130288, -0.9810071932932180605,
        3.3059941922697646532, -2.1566284043903105605, 1.2809499900267773409,
        0.7320054592734064336, -6.9568761899609068422, 2.9859431460921128654,
        0.5250540277145567813, -4.5601343467210542215, 3.1541708144284781312,
        -3.5886366686011794691, -1.0390891738201351036, 4.325761675282095986,
        -2.9547442442965956566, 1.392919453380370598, -0.9391408900400641802,
        -5.6327745004892806335, 4.4376072638391779179, 1.5386711514553881308,
        -4.3616856731038220474, 0.0915420460441123129, -0.1200847637746630392,
        1.776803822367740926, 0.44792726461475596 , -2.8337920468094819348,
        0.8560449584062054251, 0.9192418926913475952, -0.8390678931485723302,
        -0.0962101800610516422});

    P1 *= P2;
    P2 *= P1;

    ASSERT_EQ(expect1, P1);
    ASSERT_EQ(expect2, P2);
}

TEST(PolynomialOp, operatorME2)
{
    poly::Polynomial P1({
        -0.5689649579390141376, -0.0702595832954791, -0.5008575725600570294,
        -0.0804724410473385277, 0.8826480307696993322, -0.5010628158091532391,
        0.5278138520115187582, -0.3696881673266367851, -0.3031237910748294517,
        0.7814402277929672902, -0.9302201299682937297, -0.1058216476752931179});

    poly::Polynomial expect1({
        -0.5689649579390141376*1.13, -0.0702595832954791*1.13, -0.5008575725600570294*1.13,
        -0.0804724410473385277*1.13, 0.8826480307696993322*1.13, -0.5010628158091532391*1.13,
        0.5278138520115187582*1.13, -0.3696881673266367851*1.13, -0.3031237910748294517*1.13,
        0.7814402277929672902*1.13, -0.9302201299682937297*1.13, -0.1058216476752931179*1.13});

    P1 *= 1.13;

    ASSERT_EQ(expect1, P1);
}

TEST(PolynomialOp, operatorDE)
{
    poly::Polynomial P1({
        -0.5689649579390141376, -0.0702595832954791, -0.5008575725600570294,
        -0.0804724410473385277, 0.8826480307696993322, -0.5010628158091532391,
        0.5278138520115187582, -0.3696881673266367851, -0.3031237910748294517,
        0.7814402277929672902, -0.9302201299682937297, -0.1058216476752931179});

    poly::Polynomial expect1({
        -0.5689649579390141376/2.6, -0.0702595832954791/2.6, -0.5008575725600570294/2.6,
        -0.0804724410473385277/2.6, 0.8826480307696993322/2.6, -0.5010628158091532391/2.6,
        0.5278138520115187582/2.6, -0.3696881673266367851/2.6, -0.3031237910748294517/2.6,
        0.7814402277929672902/2.6, -0.9302201299682937297/2.6, -0.1058216476752931179/2.6});

    P1 /= 2.6;

    ASSERT_EQ(expect1, P1);
}

TEST(PolynomialOp, operatorP)
{
    poly::Polynomial P1({
        -0.1062311277719578673, -0.9421287696214406537, -0.2952206929644314304,
        -0.7253730322832288024, 0.9618019215748661033,  0.2067113864365714981,
        -0.3850935538473065911,  0.781124225188118082 , 0.6998438643845810159,
        -0.3602510223967676506});

    poly::Polynomial P2({
        -0.2900255483303590953,  0.2031921761205073285,  0.6483516781822460384,
        -0.7114978946376226965, -0.0210091952879123411, -0.5609985420704104442,
        -0.675011313684532821});

    poly::Polynomial P3({
        0.4275070043607374082, -0.0900858709854266415,  0.6011275475796229451,
        -0.0701267855770599802, 0.8696277500850857489, -0.9131531716049949843,
        -0.7736100913675634239, -0.8172618772728679204, 0.5914385887991704394,
        0.9057168983903858273, -0.3032651683575844359, -0.3332702356966616986,
        0.5052736850953489789,  0.536059480365319363 , -0.6841630351208745076});

    double r1 = 0.5102593269238798;
    double r2 = 0.4202158314579425;

    poly::Polynomial expect({
        0.9617254866402427105, -0.8290224644863599668,  0.9542585327974375531,
        -1.5069977124979114791, 1.810420476372039511 , -1.2674403272388339303,
        -1.833714958899402836 , -0.0361376520847498384, 1.2912824531837514552,
        0.5454658759936181767, -0.3032651683575844359, -0.3332702356966616986,
        0.5052736850953489789,  0.536059480365319363 , -0.6841630351208745076});

    poly::Polynomial p = r1 + P1 + P2 + r2 + P3;

    ASSERT_EQ(expect, p);
}

TEST(PolynomialOp, operatorS)
{
    poly::Polynomial P1({
        -0.083605971304241411 ,  0.3525906226676946975, -0.016454890674215239 ,
        -0.5864792545091419562,  0.5849321436027472565, -0.7332323635818416285,
        -0.5754096985979053613, -0.2940155137546751618, -0.6228551697653743613,
        0.4162426690728497913, -0.6726630031434737145,  0.5584276469963216361});

    poly::Polynomial P2({
        -0.6384815402554053776,  0.9797357785379359196,  0.2109589785882435287,
        0.8039083136604769919, -0.9361583416888450415,  0.2824738788276206503,
        -0.6561930091838463763,  0.1631580153898657404,  0.6124326556919201803,
        0.0858244462682176135,  0.2720763981682363664,  0.5080270012708703042,
        -0.185708761833849767 ,  0.2742815762746724229,  0.1712315247963318576,
        -0.3716162585932150098});

    poly::Polynomial P3({
        -0.2656053685976387246, -0.4073703210422265908, -0.2844203239259126548,
        -0.7369346517603694302,  0.9764414667027012662,  0.5878452824895412654});

    double r1 = -0.5300185542253908;
    double r2 = -0.25227580266473293;

    poly::Polynomial expect({
        0.7099501285966276498, -0.9249560801634040264,  0.0899162360118843651,
        0.5195055926090343945, -0.6252152686166034812, -0.1370867977353202871,
        1.2316027077817517377,  0.1308574983648094214,  0.010422514073454181 ,
        -0.5020671153410674048,  0.4005866049752373481, -1.0664546482671919403,
        0.185708761833849767 , -0.2742815762746724229, -0.1712315247963318576,
        0.3716162585932150098});

    poly::Polynomial p = r1 - P1 - P2 - r2 - P3;

    ASSERT_EQ(expect, p);
}

TEST(PolynomialOp, operatorM)
{
    poly::Polynomial P1({
        -0.8055275110483020029, -0.1918934053628740255, -0.8363433694658002349,
        0.0353254790321435586, -0.1156271016990058076, -0.1590823387680311285,
        -0.668896878088860225 ,  0.4778562805497583721,  0.0860425644537163858,
        -0.3959679404441274198, -0.314435747012615785 ,  0.4445498851756861658,
        0.9293396476516262439});

    poly::Polynomial P2({
        0.4781596859346006756,  0.2368762204403676019, -0.9415158401392451637,
        0.8980970121108096116, -0.7863843472648635036,  0.732862028279159583 ,
        0.31531323149394197  ,  0.4829768056673409138,  0.0775450509126003329,
        0.391415670838144214 ,  0.4332531450037038212, -0.4212965839131037615,
        0.3275319679237949089,  0.5892698997379186565, -0.4857885652814029065,
        0.8116336003554922573, -0.2578426017688322247});

    poly::Polynomial P3({
        -0.8268448246136705926,  0.4795520655290546053,  0.4505566701585110856,
        -0.9176823281604982174,  0.6577803756010760505,  0.7370930943385018974,
        0.6784636103462169388,  0.0727876337568815757, -0.3532952756251350745,
        -0.169359179036579599 , -0.9335320078349229611, -0.5662734671667553066,
        0.3969059276769135725, -0.5294762248109747826,  0.2744544239245654271,
        -0.9850482882147562069, -0.2654457993659999904, -0.7360261781620200949,
        -0.4616002337379594422});

    double r1 = 0.9487413412534846;
    double r2 = -0.4455876287555305;

    poly::Polynomial expect({
        -0.1346351000195173953, -0.0206845202557722208,  0.2400762684176355743,
        -0.412139156755978564 ,  0.5046551088009286756, -0.2496035498814784259,
        -0.1130742665202415925,  0.5657379623218055098, -0.4547828082983243481,
        -0.4073164694186625634, -0.1022690190688082118,  0.6456328633217837121,
        -0.1816320864105481214,  0.2619215827254007256,  0.4512275959343814979,
        0.1181440780873901919, -0.652377906106572758 ,  0.4476594295738486884,
        -1.2054182835686082509,  0.390732490822156886 , -0.3591581492522196717,
        0.5381582461872758127, -1.3596680074496247936, -0.2908844338006760788,
        -1.7363287993342411131, -0.6720306418983498231, -1.6009164957085015857,
        0.0923004355536784504, -0.5065228485182503571, -0.4837328171569254542,
        -0.0995674789439854324, -0.6710074535348924396, -0.4514206342736023503,
        -0.0579070318692886388, -0.0117351163636801731,  0.8650110326599201871,
        -0.0909962488556956828,  0.7036482760476829856,  0.0993142516654077906,
        0.0355004578109384683,  0.2876449658175963542, -0.0519804203297234632,
        0.421941353655875484 ,  0.0038605126944913637,  0.1702736701198735714,
        0.0502637622443117132, -0.0467601731089340236});
    poly::Polynomial p = r1 * P1 * P2 * r2 * P3;

    ASSERT_EQ(expect, p);
}

TEST(PolynomialOp, operatorD)
{
    poly::Polynomial P1({
        -0.3295636601763676232,  0.1650324941747163265,  0.1451959152549844312,
        -0.5485511452307365587,  0.8260630706453369054,  0.9768291320298874147,
        -0.8609185147864790721, -0.3583098867980927249,  0.3985200268475204144,
        0.5129258349523508898, -0.6281591611500185746,  0.4395044012242508291,
        0.4907775713162869646,  0.3605693265726688246,  0.0290436012909713881,
        -0.5630459549287927246,  0.0303743895494332783});

    double r1 = 0.4254522234003213;
    double r2 = 0.7709549275950698;

    poly::Polynomial expect({
        -1.0047535084007723771,  0.5031409635195775998,  0.4426644162764643564,
        -1.6723891445218472818,  2.5184505110394885818,  2.9780968477831293306,
        -2.6247156549844792295, -1.0923932440318342429,  1.2149834570010917822,
        1.5637768798355089483, -1.9150931891635352144,  1.3399341081820907995,
        1.4962526097706254635,  1.0992816856740672549,  0.088546353314804177 ,
        -1.716580032831346081 ,  0.0926035790748062915});

    poly::Polynomial p = P1 / r1 / r2;

    ASSERT_EQ(expect, p);
}

TEST(PolynomialOp, operatorModulo)
{
    poly::Polynomial P1({
        0.888935144867401883 ,  0.1025924214523481481, -0.1285611825524932694,
        -0.9513362448774940194,  0.2545562000225618515, -0.7717824395353596323,
        0.7839663445474540637,  0.0815760185792324677, -0.0099560173210964109,
        -0.5431676867850283585});

    poly::Polynomial P2({
        -0.3740985612157377016,  0.5090572892395475169,  0.4281590265445294197});

    poly::Polynomial expect({23.3924817202526682536, -44.0483500508079828251});

    poly::Polynomial p = P1 % P2;

    ASSERT_EQ(expect, p);
}
