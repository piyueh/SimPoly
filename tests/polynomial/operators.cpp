/**
 * \file tests/polynomial/operators.cpp
 * \brief Unit tests for overloaded operators of Polynomial class.
 * \author Pi-Yueh Chuang
 * \version beta
 * \date 2018-02-13
 */

# include <algorithm>
# include <cmath>
# include <gtest/gtest.h>
# include <iostream>

# include "exceptions.h"
# include "polynomial.h"

using namespace simpoly;

TEST(PolynomialOp, divide)
{
    poly::Polynomial P1({
        -0.7249546580065966417,  0.2570329501940382677,  0.0913200710812984706,
       -0.1487351182147265138});

    poly::Polynomial P2({
        0.8900399626375006257, -0.8360625184618257766,  0.2475645687375704895,
        0.2191962005870811137, -0.0070950916132856978,  0.1288524842056135711,
        0.0782597597581784488,  0.4690262477613027503,  0.5724070732242025894,
        -0.8291111428879178735,  0.872920016749398231 ,  0.9443092445194338769,
        0.1625131493243689995, -0.2617551207055393014,  0.0936686710914949039,
        -0.8516011759640271794,  0.9098968480444020734,  0.3754564503869470826});

    poly::Polynomial Q1_expect({0.});

    poly::Polynomial R1_expect({
        -0.7249546580065966417,  0.2570329501940382677,  0.0913200710812984706,
        -0.1487351182147265138});

    poly::Polynomial Q2_expect({
        7.3907143656009984625e+03,   1.1966878345780710902e+02,   1.8916616253203562792e+03,
        -8.3085257025485316262e+02,  -8.0834943452350003668e+01,  -5.2159969391234415070e+02,
        -2.4762190619993752705e+01,  -5.8546077249278141608e+01,   8.2347535031402941286e+01,
        2.8045500779741754371e+01,   3.1124068260347449666e+01,  -3.6295392564650286182e+00,
        -3.3443789255969833540e+00,  -7.6674481012515762757e+00,  -2.5243295254917983428e+00});

    poly::Polynomial R2_expect({
        5358.822845301349843794 , -1813.7387379646263525501,   665.9370895505105636403});

    poly::Polynomial R1, R2;
    poly::Polynomial Q1 = P1.divide(P2, R1);
    poly::Polynomial Q2 = P2.divide(P1, R2);

    ASSERT_EQ(Q1_expect, Q1);
    ASSERT_EQ(R1_expect, R1);

    ASSERT_EQ(Q2_expect, Q2);
    ASSERT_EQ(R2_expect, R2);
}

TEST(PolynomialOp, quotient)
{
    poly::Polynomial P1({
        -0.9663667876838777371, -0.3201238251578861771,  0.9429587145559050754,
        -0.3474627673598409405,  0.0485161091447599002,  0.0298298020900540362,
        0.819719546444455105 , -0.5818918500491996326, -0.6203016211126179957,
        0.3206863708335503382,  0.3823814014313382526, -0.59381818908274564  ,
        -0.8460829955484969744, -0.5499673474586161959});

    poly::Polynomial P2({
        -0.3207155701333266329, -0.6168162840504542999,  0.1889574039015020634,
        -0.5915177106195603773, -0.1581791436246160476,  0.0949387071358294143,
        -0.4818915028407591006,  0.6547207093842017933, -0.4128665084180891398,
        0.7668980406052035015});

    poly::Polynomial Q1_expect({
        0.8249657725606294179,  0.8005569239932489589, -0.9638707288415887531,
        -1.489328228002592347 , -0.7171322892214005984});

    poly::Polynomial Q2_expect({0.});

    poly::Polynomial Q1 = P1.quotient(P2);
    poly::Polynomial Q2 = P2.quotient(P1);

    ASSERT_EQ(Q1_expect, Q1);
    ASSERT_EQ(Q2_expect, Q2);
}

TEST(PolynomialOp, remainder)
{
    poly::Polynomial P1({
        -0.0116937069297267104, -0.7994017320589650311,  0.5898645588003439411,
        0.9009811087500272375});

    poly::Polynomial P2({
            0.7017055859963849951, 0.196980626190698338, -0.2045707075553595544});

    poly::Polynomial R1_expect({4.9874466083454764842,  3.694430289015656399});

    poly::Polynomial R2_expect({
        0.7017055859963849951,  0.196980626190698338 , -0.2045707075553595544});

    poly::Polynomial R1 = P1.remainder(P2);
    poly::Polynomial R2 = P2.remainder(P1);

    ASSERT_EQ(R1_expect, R1);
    ASSERT_EQ(R2_expect, R2);
}

TEST(PolynomialOp, operatorPE1)
{
    poly::Polynomial P1({
        -0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    poly::Polynomial P2({
        -0.4374838402741558774, -0.6852547323831388315, -0.7202741574766928778,
        0.6371775123585283751, 0.2281331198558973483, -0.9442293099079275276,
        0.4433559963416691119,  0.9251343783507641749, -0.6762900761052512699,
        0.8490761070965935353, -0.627905488265370515 ,  0.2012677014364148143,
        0.8852808514193275524,  0.1862853350610125247});

    poly::Polynomial expect1({
        -0.6152572432129774782,  0.1924088536214336731, -1.4176913802996480296,
        -0.1874926741867606328, 0.2281331198558973483, -0.9442293099079275276,
        0.4433559963416691119,  0.9251343783507641749, -0.6762900761052512699,
        0.8490761070965935353, -0.627905488265370515 ,  0.2012677014364148143,
        0.8852808514193275524,  0.1862853350610125247});

    poly::Polynomial expect2({
        -1.0527410834871333556, -0.4928458787617051584, -2.1379655377763411295,
        0.4496848381717677423, 0.4562662397117946966, -1.8884586198158550552,
        0.8867119926833382237,  1.8502687567015283499, -1.3525801522105025398,
        1.6981522141931870706, -1.2558109765307410299,  0.4025354028728296285,
        1.7705617028386551048,  0.3725706701220250494});

    P1 += P2;
    P2 += P1;

    ASSERT_EQ(expect1, P1);
    ASSERT_EQ(expect2, P2);
}

TEST(PolynomialOp, operatorPE2)
{
    poly::Polynomial P1({
        -0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    poly::Polynomial expect({
        10.-0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    P1 += 10.;

    ASSERT_EQ(expect, P1);
}

TEST(PolynomialOp, operatorSE1)
{
    poly::Polynomial P1({0.2167545584979095885,  0.5757075266780837808});

    poly::Polynomial P2({
        0.7315319258497021693, -0.6756258293480223998, -0.1651373746655191432,
        -0.7835952931514673647});

    poly::Polynomial expect1({
        -0.5147773673517925808,  1.2513333560261061805,  0.1651373746655191432,
        0.7835952931514673647});

    poly::Polynomial expect2({
        1.24630929320149475, -1.9269591853741285803, -0.3302747493310382865,
        -1.5671905863029347294});

    P1 -= P2;
    P2 -= P1;

    ASSERT_EQ(expect1, P1);
    ASSERT_EQ(expect2, P2);
}

TEST(PolynomialOp, operatorSE2)
{
    poly::Polynomial P1({
        -0.1777734029388216008,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    poly::Polynomial expect({
        -0.1777734029388216008-5.123,  0.8776635860045725046, -0.6974172228229551518,
        -0.8246701865452890079});

    P1 -= 5.123;

    ASSERT_EQ(expect, P1);
}

TEST(PolynomialOp, operatorME1)
{
    poly::Polynomial P1({
        -0.5689649579390141376, -0.0702595832954791, -0.5008575725600570294,
        -0.0804724410473385277, 0.8826480307696993322, -0.5010628158091532391,
        0.5278138520115187582, -0.3696881673266367851, -0.3031237910748294517,
        0.7814402277929672902, -0.9302201299682937297, -0.1058216476752931179});

    poly::Polynomial P2({
        -0.5168774267455518157,  0.6239152998264949623, -0.295338470855132762,
        -0.8752497437352042553, -0.1272074691700539883, -0.7523140397402710011,
        -0.8928493210168237937,  0.6771718168679945471, 0.4579760061953945804,
        -0.1706921116057984467, -0.6288494421519463806, -0.6656626636186446788,
        0.744891324429169055 ,  0.0330177865672414139, -0.9535056132208914459});

    poly::Polynomial expect1({
        0.2940851433679087523, -0.3186703497053071099, 0.3830831849412457135,
        0.2478384772221420285, -0.2246350458338114975, 1.7088056091018986038,
        -0.1511121873545088201, -0.0396766643104647376, 0.2959964664008620239,
        -1.7484840000816208594, 0.9891105567750591021, 0.6754206172940508957,
        -0.6132482049520595613, 1.594313592910587829, -0.3637603406241872728,
        -0.7310385602380925496, 2.4976199600549144897, -0.5120454674198724465,
        -0.6593466605795673674, 0.0405033454990290087, -0.6584182910207236894,
        1.6103380058676495246, -0.3076397218157354008, -0.8546470805991770447,
        0.8834761188786985908, 0.1009015350586754817});

    poly::Polynomial expect2({
        -0.1520059721481013537, 0.3481977307346908468, -0.4836850141876127829,
        -0.0523729867442680047, 0.3991061153284165552, -1.6125931178939989508,
        0.922114664875417489, -0.2178924904701229348, -2.2097745110605631069,
        1.0260201774187693857, -2.507886220316130288, -0.9810071932932180605,
        3.3059941922697646532, -2.1566284043903105605, 1.2809499900267773409,
        0.7320054592734064336, -6.9568761899609068422, 2.9859431460921128654,
        0.5250540277145567813, -4.5601343467210542215, 3.1541708144284781312,
        -3.5886366686011794691, -1.0390891738201351036, 4.325761675282095986,
        -2.9547442442965956566, 1.392919453380370598, -0.9391408900400641802,
        -5.6327745004892806335, 4.4376072638391779179, 1.5386711514553881308,
        -4.3616856731038220474, 0.0915420460441123129, -0.1200847637746630392,
        1.776803822367740926, 0.44792726461475596 , -2.8337920468094819348,
        0.8560449584062054251, 0.9192418926913475952, -0.8390678931485723302,
        -0.0962101800610516422});

    P1 *= P2;
    P2 *= P1;

    ASSERT_EQ(expect1, P1);
    ASSERT_EQ(expect2, P2);
}

TEST(PolynomialOp, operatorME2)
{
    poly::Polynomial P1({
        -0.5689649579390141376, -0.0702595832954791, -0.5008575725600570294,
        -0.0804724410473385277, 0.8826480307696993322, -0.5010628158091532391,
        0.5278138520115187582, -0.3696881673266367851, -0.3031237910748294517,
        0.7814402277929672902, -0.9302201299682937297, -0.1058216476752931179});

    poly::Polynomial expect1({
        -0.5689649579390141376*1.13, -0.0702595832954791*1.13, -0.5008575725600570294*1.13,
        -0.0804724410473385277*1.13, 0.8826480307696993322*1.13, -0.5010628158091532391*1.13,
        0.5278138520115187582*1.13, -0.3696881673266367851*1.13, -0.3031237910748294517*1.13,
        0.7814402277929672902*1.13, -0.9302201299682937297*1.13, -0.1058216476752931179*1.13});

    P1 *= 1.13;

    ASSERT_EQ(expect1, P1);
}

TEST(PolynomialOp, operatorDE)
{
    poly::Polynomial P1({
        -0.5689649579390141376, -0.0702595832954791, -0.5008575725600570294,
        -0.0804724410473385277, 0.8826480307696993322, -0.5010628158091532391,
        0.5278138520115187582, -0.3696881673266367851, -0.3031237910748294517,
        0.7814402277929672902, -0.9302201299682937297, -0.1058216476752931179});

    poly::Polynomial expect1({
        -0.5689649579390141376/2.6, -0.0702595832954791/2.6, -0.5008575725600570294/2.6,
        -0.0804724410473385277/2.6, 0.8826480307696993322/2.6, -0.5010628158091532391/2.6,
        0.5278138520115187582/2.6, -0.3696881673266367851/2.6, -0.3031237910748294517/2.6,
        0.7814402277929672902/2.6, -0.9302201299682937297/2.6, -0.1058216476752931179/2.6});

    P1 /= 2.6;

    ASSERT_EQ(expect1, P1);
}
